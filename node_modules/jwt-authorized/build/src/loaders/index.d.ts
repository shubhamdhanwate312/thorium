import tokenAuthServiceCallable from './tokenAuthServiceCallable';
import DiContainer from 'di-why';
import { LoggerInterface, LoadDict } from 'di-why/build/src/DiContainer';
import { EventsInterface } from './events';
declare type CallableSingleArgLoadDictProp<T, S = keyof T> = S extends (keyof T) ? (T[S] extends (arg: LoadDict) => any ? S : never) : never;
export declare type LoadThroughDiProps = {
    di: DiContainer;
    diMethodName?: CallableSingleArgLoadDictProp<DiContainer>;
    logger?: LoggerInterface;
    events?: EventsInterface;
};
declare const loadThroughDi: ({ di, diMethodName, logger, events }: LoadThroughDiProps) => DiContainer;
export { loadThroughDi, tokenAuthServiceCallable };
export default loadThroughDi;
//# sourceMappingURL=index.d.ts.map