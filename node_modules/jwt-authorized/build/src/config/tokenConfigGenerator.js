"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var jws_1 = __importDefault(require("jws"));
var canUse_1 = require("../utils/canUse");
var nHoursFromNow = function (n) {
    return function () { return (Math.floor(Date.now() / 1000) + n * (60 * 60)); };
};
function default_1(_a) {
    var expireTokensEveryNHours = _a.expireTokensEveryNHours, algorithm = _a.algorithm, keys = _a.keys;
    if (!canUse_1.canUsePublicKey(algorithm, keys) && !canUse_1.canUsePrivateKey(algorithm, keys)) {
        throw new Error("Bad configuration, not enough keys supplied to verify-only or sign and verify with the current algorithm");
    }
    return {
        engine: jws_1.default,
        expiresIn: nHoursFromNow(expireTokensEveryNHours),
        now: nHoursFromNow(0),
        algorithm: algorithm,
        keys: keys,
    };
}
exports.default = default_1;
;
