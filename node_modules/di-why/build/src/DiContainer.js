"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var _diContainers = [];
var _logger = { debug: function () { return undefined; } };
var DiContainer = /** @class */ (function () {
    function DiContainer(_a) {
        var logger = _a.logger, load = _a.load;
        this.logger = logger || _logger;
        this.locatorRefDict = {};
        this.loadDict = load || {};
        this.loading = false;
        this.loadPromises = {};
        _diContainers.push(this);
    }
    DiContainer.prototype.loadAll = function (injectionDict) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _i, refName, err_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.loading) {
                            if (!injectionDict) {
                                return [2 /*return*/, this.loading];
                            }
                            else {
                                throw new Error('TODO Need to implement this loading queue feature');
                            }
                        }
                        this.loading = true;
                        injectionDict = injectionDict || {};
                        this.loadDict = __assign(__assign({}, this.loadDict), injectionDict);
                        _a = [];
                        for (_b in this.loadDict)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        refName = _a[_i];
                        this.logger.debug('loading :', refName);
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.getLoadPromise(refName)];
                    case 3:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _c.sent();
                        this.logger.debug("DiContainer:loadAll(" + refName + "):load error occured in .load()", err_1);
                        throw err_1;
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6:
                        this.loading = false;
                        return [2 /*return*/, this.loading];
                }
            });
        });
    };
    DiContainer.prototype.addToLoadDict = function (injectionDict) {
        if (this.loading) {
            throw new Error('Cannot add to load dict when loading');
        }
        injectionDict = injectionDict || {};
        this.loadDict = __assign(__assign({}, this.loadDict), injectionDict);
    };
    DiContainer.prototype.addToLoadingPromisesIfNotAlreadyThere = function (refName, promise) {
        if (this.loadPromises.hasOwnProperty(refName)) {
            return false;
        }
        this.loadPromises[refName] = promise;
        return true;
    };
    DiContainer.prototype.deepLocateDeps = function (locateDeps) {
        return __awaiter(this, void 0, void 0, function () {
            var deps, _a, _b, _i, key, depNameOrNested, dep, _c, err_2;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.logger.debug("+++++++DiContainer:deepLocateDeps(locateDeps):locateDeps begin: ", locateDeps);
                        deps = (Array.isArray(locateDeps) && []) || {};
                        _a = [];
                        for (_b in locateDeps)
                            _a.push(_b);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 10];
                        key = _a[_i];
                        depNameOrNested = locateDeps[key];
                        this.logger.debug("DiContainer:deepLocateDeps(locateDeps): inside for key: ", key, ' depNameOrNested : ', depNameOrNested);
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, , 8]);
                        if (!(typeof depNameOrNested !== 'string')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.deepLocateDeps(depNameOrNested)];
                    case 3:
                        _c = _d.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.get(depNameOrNested)];
                    case 5:
                        _c = _d.sent();
                        _d.label = 6;
                    case 6:
                        dep = (_c);
                        this.logger.debug("DiContainer:deepLocateDeps(locateDeps): inside for key: ", key, ' resolved dep : ', dep);
                        deps[key] = dep;
                        return [3 /*break*/, 8];
                    case 7:
                        err_2 = _d.sent();
                        this.logger.debug("DiContainer:deepLocateDeps(" + depNameOrNested + "):locateDeps error occured in .get()", err_2);
                        throw err_2;
                    case 8:
                        this.logger.debug("DiContainer:deepLocateDeps(locateDeps): inside for key: ", key, ' resolved DEPS : ', deps[key]);
                        _d.label = 9;
                    case 9:
                        _i++;
                        return [3 /*break*/, 1];
                    case 10:
                        this.logger.debug("========DiContainer:deepLocateDeps(locateDeps): END:  resolved DEPS : ", deps);
                        return [2 /*return*/, deps];
                }
            });
        });
    };
    DiContainer.prototype.mergeObjects = function (a, b) {
        if (Array.isArray(a) || Array.isArray(b)
            || (typeof a === 'string' || typeof b === 'string')
            || (typeof a === 'function' || typeof b === 'function')) {
            return [a, b];
        }
        var bCopy = __assign({}, b);
        var keysIntersection = [];
        var bComplement = {};
        for (var key in a) {
            if (b.hasOwnProperty(key)) {
                keysIntersection.push(key);
            }
            else {
                bComplement[key] = a[key];
            }
        }
        for (var _i = 0, keysIntersection_1 = keysIntersection; _i < keysIntersection_1.length; _i++) {
            var key = keysIntersection_1[_i];
            bCopy[key] = this.mergeObjects(a[key], b[key]);
        }
        var merged = __assign(__assign({}, bComplement), bCopy);
        return merged;
    };
    DiContainer.prototype.load = function (refName) {
        return __awaiter(this, void 0, void 0, function () {
            var el, me, destructureDeps, locateDeps, providedDeps, err_3, deps, ret, err_4, err_5, ret, err_6;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.logger.debug('DiContainer:Loading: ', refName);
                        if (this.has(refName)) {
                            this.logger.debug('DiContainer:Already loaded: ', refName);
                            return [2 /*return*/, this.get(refName)];
                        }
                        if (!this.loadDict.hasOwnProperty(refName)) {
                            throw new Error("DiContainer:load() attempting to load inexistent ref " + refName);
                        }
                        el = this.loadDict[refName];
                        me = null;
                        destructureDeps = el.destructureDeps;
                        locateDeps = null;
                        providedDeps = null;
                        if (el.deps) {
                            providedDeps = el.deps;
                            destructureDeps = destructureDeps || Array.isArray(providedDeps);
                        }
                        if (!el.locateDeps) return [3 /*break*/, 4];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.deepLocateDeps(el.locateDeps)];
                    case 2:
                        locateDeps = _b.sent();
                        destructureDeps = destructureDeps || Array.isArray(locateDeps);
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _b.sent();
                        this.logger.debug("DiContainer:load(" + refName + "):locateDeps error occured in .deepLocateDeps()", err_3, "\n LocateDeps: ", el.locateDeps);
                        throw err_3;
                    case 4:
                        deps = null;
                        if (destructureDeps) {
                            if (!Array.isArray(providedDeps)) {
                                providedDeps = (providedDeps && Object.values(providedDeps)) || [];
                            }
                            if (!Array.isArray(locateDeps)) {
                                locateDeps = (locateDeps && Object.values(locateDeps)) || [];
                            }
                            deps = __spreadArray(__spreadArray([], locateDeps, true), providedDeps, true);
                        }
                        else {
                            deps = this.mergeObjects((locateDeps || {}), (providedDeps || {}));
                        }
                        if (!el.before) return [3 /*break*/, 9];
                        ret = null;
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, el.before({ serviceLocator: this, el: el, deps: deps })];
                    case 6:
                        ret = _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        err_4 = _b.sent();
                        this.logger.debug("DiContainer:load(" + refName + "):before error occured in .before()", err_4);
                        throw err_4;
                    case 8:
                        if (ret !== undefined) {
                            deps = ret;
                        }
                        else {
                            this.logger.debug("DiContainer:load(" + refName + "):before your .before() is returning undefined as deps is it on purpose?");
                        }
                        _b.label = 9;
                    case 9:
                        if (!el.injectable) return [3 /*break*/, 14];
                        this.logger.debug("DiContainer:load(" + refName + "):inject injectable deps", deps);
                        _b.label = 10;
                    case 10:
                        _b.trys.push([10, 12, , 13]);
                        return [4 /*yield*/, el.injectable.inject(deps)];
                    case 11:
                        _b.sent();
                        return [3 /*break*/, 13];
                    case 12:
                        err_5 = _b.sent();
                        this.logger.debug("DiContainer:load(" + refName + "):inject error occured in .inject()", err_5);
                        throw err_5;
                    case 13:
                        me = el.injectable;
                        _b.label = 14;
                    case 14:
                        if (el.constructible) {
                            this.logger.debug("DiContainer:load(" + refName + "):inject constructible deps", deps);
                            if (destructureDeps) {
                                this.logger.debug("DiContainer:load(" + refName + "):inject constructible destructureDeps", deps);
                                me = new ((_a = el.constructible).bind.apply(_a, __spreadArray([void 0], deps, false)))();
                            }
                            else if (Object.keys(deps).length) {
                                this.logger.debug("DiContainer:load(" + refName + "):inject constructible deps keys length", deps);
                                me = new el.constructible(deps);
                            }
                            else {
                                this.logger.debug("DiContainer:load(" + refName + "):inject constructible no destructure no keys length", deps);
                                me = new el.constructible();
                            }
                            this.logger.debug("DiContainer:load(" + refName + "):inject constructible deps", deps, me);
                        }
                        if (el.factory) {
                            this.logger.debug("DiContainer:load(" + refName + "):inject factory deps", deps);
                            if (destructureDeps) {
                                this.logger.debug("DiContainer:load(" + refName + "):inject factory destructureDeps", deps);
                                me = el.factory.apply(el, deps);
                            }
                            else if (Object.keys(deps).length) {
                                this.logger.debug("DiContainer:load(" + refName + "):inject factory deps keys length", deps);
                                me = el.factory(deps);
                            }
                            else {
                                this.logger.debug("DiContainer:load(" + refName + "):inject factory no destructure no keys length", deps);
                                me = el.factory();
                            }
                            this.logger.debug("DiContainer:load(" + refName + "):inject factory deps", deps, me);
                        }
                        if (el.instance) {
                            me = el.instance;
                        }
                        if (!el.after) return [3 /*break*/, 19];
                        ret = void 0;
                        _b.label = 15;
                    case 15:
                        _b.trys.push([15, 17, , 18]);
                        return [4 /*yield*/, el.after({ me: me, serviceLocator: this, el: el, deps: deps })];
                    case 16:
                        ret = _b.sent();
                        return [3 /*break*/, 18];
                    case 17:
                        err_6 = _b.sent();
                        this.logger.debug("DiContainer:load(" + refName + "):after error occured in .after()", err_6);
                        throw err_6;
                    case 18:
                        if (ret !== undefined) {
                            me = ret;
                        }
                        _b.label = 19;
                    case 19: return [2 /*return*/, this.set(refName, me)];
                }
            });
        });
    };
    DiContainer.prototype.get = function (refName) {
        return __awaiter(this, void 0, void 0, function () {
            var err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.isValidRefNameOrThrow(refName);
                        if (!!this.has(refName)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.getLoadPromise(refName)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_7 = _a.sent();
                        this.logger.debug("DiContainer:get(" + refName + "):load error occured in .load()", err_7);
                        throw err_7;
                    case 4: return [2 /*return*/, this.locatorRefDict[refName]];
                }
            });
        });
    };
    DiContainer.prototype.getLoadPromise = function (refName) {
        if (!this.loadDict.hasOwnProperty(refName)) {
            throw new Error("Trying to access inexistent ref: " + refName + " available refs are: " + Object.keys(this.locatorRefDict).join('\n'));
        }
        if (!this.loadPromises.hasOwnProperty(refName)) {
            var promise = this.load(refName);
            this.loadPromises[refName] = promise;
        }
        return this.loadPromises[refName];
    };
    DiContainer.prototype.set = function (refName, val) {
        this.isValidRefNameOrThrow(refName);
        if (this.has(refName)) {
            this.logger.debug('Replacing existent ref: ', refName);
        }
        this.locatorRefDict[refName] = val;
        return val;
    };
    DiContainer.prototype.has = function (refName) {
        this.isValidRefNameOrThrow(refName);
        this.logger.debug('DiContainer:has(', refName, ')', Object.keys(this.locatorRefDict));
        return this.locatorRefDict.hasOwnProperty(refName);
    };
    DiContainer.prototype.isValidRefNameOrThrow = function (refName) {
        if (typeof refName !== 'string') {
            throw new Error("Can only reference locatables by strings: " + refName);
        }
    };
    DiContainer.prototype.emit = function (eventName) {
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, refName, listener, subscriberCallback, err_8;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = [];
                        for (_b in this.loadDict)
                            _a.push(_b);
                        _c = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_c < _a.length)) return [3 /*break*/, 6];
                        refName = _a[_c];
                        listener = this.loadDict[refName];
                        if (!listener.subscriptions || !listener.subscriptions[eventName])
                            return [3 /*break*/, 5];
                        subscriberCallback = listener.subscriptions[eventName];
                        if (typeof subscriberCallback !== 'function') {
                            throw new Error("Listener with ref: " + refName + " of event " + eventName + ", must have a callable " + eventName + " function as prop");
                        }
                        this.logger.debug('emitting :', eventName, 'on ref:', refName);
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, subscriberCallback({ serviceLocator: this, params: params })];
                    case 3:
                        _d.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        err_8 = _d.sent();
                        this.logger.debug("DiContainer:emit('" + eventName + "'):call:error on " + refName, err_8, listener);
                        throw err_8;
                    case 5:
                        _c++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    DiContainer.inject = function (_a) {
        var logger = _a.logger;
        _logger = logger;
    };
    DiContainer.getLatestContainer = function () {
        return DiContainer.getNthContainer(_diContainers.length);
    };
    DiContainer.getFirstContainer = function () {
        return DiContainer.getNthContainer(1);
    };
    DiContainer.getNthContainer = function (n) {
        if (!(n > 0 && (_diContainers.length >= n))) {
            throw new Error('Out of range');
        }
        return _diContainers[n - 1];
    };
    DiContainer.getContainers = function () {
        return _diContainers;
    };
    return DiContainer;
}());
exports.default = DiContainer;
