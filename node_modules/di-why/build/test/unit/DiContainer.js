"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv/config");
var chai_1 = __importDefault(require("chai"));
var chai_2 = require("chai");
var saylo_1 = require("saylo");
var chai_as_promised_1 = __importDefault(require("chai-as-promised"));
var DiContainer_1 = __importDefault(require("../../src/DiContainer"));
chai_1.default.use(chai_as_promised_1.default);
saylo_1.logger.turnOn('debug');
var Hello = /** @class */ (function () {
    function Hello(injection) {
        this.injection = injection;
    }
    Hello.inject = function (injection) {
        Hello.helloInjection = injection;
    };
    Hello.getInjection = function () {
        return Hello.helloInjection;
    };
    Hello.helloInjection = null;
    return Hello;
}());
var HelloDestructureConstructorParams = /** @class */ (function () {
    function HelloDestructureConstructorParams(param1, param2, param3) {
        this.param1 = param1;
        this.param2 = param2;
        this.param3 = param3;
    }
    return HelloDestructureConstructorParams;
}());
var data = { a: 1, b: "2", c: Hello, };
var data2 = { a: 1, b: "2", c: Hello, };
var data3 = { a: 1, b: "2", c: Hello, };
var data3Values = Object.values(data3);
var afterWasExecuted = false;
var stall = function (stallTime) {
    if (stallTime === void 0) { stallTime = 3000; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, stallTime); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
};
var Hey = /** @class */ (function () {
    function Hey(_a) {
        var hey = _a.hey;
        this.hey = hey;
    }
    Hey.prototype.hoy = function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        this.hoya = params;
    };
    return Hey;
}());
var injectionDict2 = {
    'HelloAddedAfterwards': {
        instance: Hello
    },
};
var injectionDict = {
    'Hello': {
        instance: Hello
    },
    'data': {
        instance: data,
        after: function (_a) {
            var me = _a.me;
            return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, stall(200)];
                        case 1:
                            _b.sent();
                            afterWasExecuted = true;
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
    'Hey': {
        constructible: Hey,
        deps: { hey: 'hey' },
        subscriptions: {
            onHoyEvent: function (_a) {
                var serviceLocator = _a.serviceLocator, params = _a.params;
                return __awaiter(this, void 0, void 0, function () {
                    var me;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, serviceLocator.get('Hey')];
                            case 1:
                                me = _b.sent();
                                me.hoy.apply(me, params);
                                return [2 /*return*/];
                        }
                    });
                });
            },
        },
    },
    'HelloObjDestructurableParams': {
        constructible: HelloDestructureConstructorParams,
        deps: data2,
        destructureDeps: true,
    },
    'HelloArrayDestructurableParams': {
        constructible: HelloDestructureConstructorParams,
        deps: data3Values,
    },
    'HelloBefore': {
        constructible: Hello,
        before: function (_a) {
            var deps = _a.deps, serviceLocator = _a.serviceLocator;
            return __awaiter(void 0, void 0, void 0, function () {
                var someDepNeedsToBePlacedInSpecialPlace;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, serviceLocator.get('HelloObjDestructurableParams')];
                        case 1:
                            someDepNeedsToBePlacedInSpecialPlace = _b.sent();
                            if (typeof deps.data3Values === 'undefined') {
                                throw new Error('Deps have not been injected properly');
                            }
                            deps.additionFromBefore = someDepNeedsToBePlacedInSpecialPlace;
                            return [2 /*return*/, deps];
                    }
                });
            });
        },
        deps: {
            data3Values: data3Values
        },
    },
    'HelloNestedLocateDepsColliding': {
        constructible: Hello,
        deps: {
            some: { nested: data2 }
        },
        locateDeps: {
            some: { nested: 'HelloObjDestructurableParams' }
        },
    },
    'HelloFactoryNestedLocateDepsColliding': {
        factory: function (_a) {
            var some = _a.some;
            return new Hello({ some: some });
        },
        deps: {
            some: { nested: data2 }
        },
        locateDeps: {
            some: { nested: 'HelloObjDestructurableParams' }
        },
    },
    'HelloNestedLocateDepsNoCollide': {
        constructible: Hello,
        deps: {
            some: { nested: data2 }
        },
        locateDeps: {
            some: { otherNested: 'HelloObjDestructurableParams', moreNested: 'HelloNestedLocateDepsColliding' }
        },
    },
    'HelloNestedLocateDepsDifferentLocateAndDepsKeys': {
        constructible: Hello,
        deps: {
            some: { nested: data2 }
        },
        locateDeps: {
            other: { otherNested: 'HelloObjDestructurableParams', moreNested: 'HelloNestedLocateDepsColliding' }
        },
    },
    'HelloLocateNestedArrayDeps': {
        constructible: Hello,
        deps: {
            some: { nested: data2 }
        },
        locateDeps: {
            other: ['Hey'],
        },
    },
    'emptyObject': {
        instance: {},
    },
    'logger': {
        instance: saylo_1.logger,
        after: function (_a) {
            var serviceLocator = _a.serviceLocator;
            return __awaiter(void 0, void 0, void 0, function () {
                var data;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, serviceLocator.get('data')];
                        case 1:
                            data = _b.sent();
                            serviceLocator.set('emptyObject', data);
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
    'HelloStaticInjectable': {
        injectable: Hello,
        deps: data,
        after: function (_a) {
            var me = _a.me;
            me.getInjection().d = 'd';
        },
    },
    'HelloConstructible': {
        constructible: Hello,
        deps: data,
        after: function (_a) {
            var me = _a.me;
            me.injection.e = 'e';
        },
    },
};
var bootstrapped = false;
describe("DiContainer", function () {
    var _this = this;
    before(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            bootstrapped = true;
            return [2 /*return*/];
        });
    }); });
    it('bootstrapped properly', function () {
        (0, chai_2.expect)(bootstrapped).to.be.equal(true);
    });
    describe("DiContainer.getNthContainer(1)", function () {
        it('should return an instance of DiContainer set at bootstrap', function () {
            var a = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
            new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
            new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
            (0, chai_2.expect)(DiContainer_1.default.getNthContainer(1)).to.be.equal(DiContainer_1.default.getFirstContainer()).and.to.be.equal(a);
        });
    });
    describe("DiContainer.getLatestContainer()", function () {
        it('should return an instance of DiContainer set at bootstrap', function () {
            var d = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
            (0, chai_2.expect)(DiContainer_1.default.getLatestContainer())
                .to.be.an.instanceof(DiContainer_1.default)
                .and.be.equal(d);
        });
    });
    describe("DiContainer.mergeObjects(a, b)", function () {
        it('should return an object with both merged (no collision)', function () {
            var di = new DiContainer_1.default({ logger: saylo_1.logger });
            var o1 = {
                a1: {
                    a2a: '-a2a'
                },
                b1: '-b1',
                d1: '-d1',
            };
            var o2 = {
                a1: {
                    a2a: '_a2a',
                    a2b: '_a2b'
                },
                b1: '_b1',
                c1: '_c1'
            };
            var expected = {
                a1: {
                    a2a: ['-a2a', '_a2a'],
                    a2b: '_a2b'
                },
                b1: ['-b1', '_b1'],
                c1: '_c1',
                d1: '-d1',
            };
            (0, chai_2.expect)(di.mergeObjects(o1, o2)).to.be.deep.equal(expected);
        });
    });
    describe("di.addToLoadDict()", function () {
        it('should be able to add more refs for loading', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            di.addToLoadDict(injectionDict2);
                            (0, chai_2.expect)(di.has('HelloAddedAfterwards')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('HelloAddedAfterwards')).to.be.equal(true);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("di.loadAll()", function () {
        it('should be able to load :instance', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('Hello')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('Hello')).to.be.equal(true);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :instance and execute after', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            afterWasExecuted = false;
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('data')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('data')).to.be.equal(true);
                            (0, chai_2.expect)(afterWasExecuted).to.be.equal(true);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :instance execute after and replace me with after return value if not null', function () {
            return __awaiter(this, void 0, void 0, function () {
                var injDict, di, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            injDict = {
                                'WillBeReplaced': {
                                    instance: 'ThisValueWillBeReplaced',
                                    after: function (_a) {
                                        var me = _a.me, serviceLocator = _a.serviceLocator;
                                        return 'ReplacedByThis';
                                    },
                                },
                            };
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _b.sent();
                            (0, chai_2.expect)(di.has('WillBeReplaced')).to.be.equal(true);
                            _a = chai_2.expect;
                            return [4 /*yield*/, di.get('WillBeReplaced')];
                        case 2:
                            _a.apply(void 0, [_b.sent()]).to.be.equal('ReplacedByThis');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :instance and give access to serviceLocator in after callback', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, eo;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('emptyObject')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('emptyObject')];
                        case 2:
                            eo = _a.sent();
                            (0, chai_2.expect)(eo).to.be.equal(data);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :injectable', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('HelloStaticInjectable')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('HelloStaticInjectable')).to.be.equal(true);
                            (0, chai_2.expect)(Hello.getInjection().d).to.be.equal('d');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :constructible', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, e;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('HelloConstructible')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('HelloConstructible')).to.be.equal(true);
                            return [4 /*yield*/, di.get('HelloConstructible')];
                        case 2:
                            e = (_a.sent()).injection.e;
                            (0, chai_2.expect)(e).to.be.equal('e');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :constructible with destructurable params', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('HelloObjDestructurableParams')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            (0, chai_2.expect)(di.has('HelloObjDestructurableParams')).to.be.equal(true);
                            return [4 /*yield*/, di.get('HelloObjDestructurableParams')];
                        case 2:
                            aaa = _a.sent();
                            (0, chai_2.expect)(aaa.param1).to.be.equal(data2.a);
                            (0, chai_2.expect)(aaa.param2).to.be.equal(data2.b);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :constructible with locateDeps and deps which have common deep nested properties', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa, dep;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('HelloNestedLocateDepsColliding')];
                        case 2:
                            aaa = _a.sent();
                            return [4 /*yield*/, di.get('HelloObjDestructurableParams')];
                        case 3:
                            dep = _a.sent();
                            (0, chai_2.expect)(aaa.injection).to.be.deep.equal({
                                some: {
                                    nested: __assign(__assign({}, data2), dep)
                                },
                            });
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :constructible with locateDeps and deps which have common deep nested properties', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa, dep, dep2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('HelloNestedLocateDepsNoCollide')];
                        case 2:
                            aaa = _a.sent();
                            return [4 /*yield*/, di.get('HelloObjDestructurableParams')];
                        case 3:
                            dep = _a.sent();
                            return [4 /*yield*/, di.get('HelloNestedLocateDepsColliding')];
                        case 4:
                            dep2 = _a.sent();
                            (0, chai_2.expect)(aaa.injection).to.be.deep.equal({
                                some: {
                                    nested: data2,
                                    otherNested: dep,
                                    moreNested: dep2,
                                },
                            });
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :constructible with locateDeps and deps which different deep nested properties', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa, dep, dep2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('HelloNestedLocateDepsDifferentLocateAndDepsKeys')];
                        case 2:
                            aaa = _a.sent();
                            return [4 /*yield*/, di.get('HelloObjDestructurableParams')];
                        case 3:
                            dep = _a.sent();
                            return [4 /*yield*/, di.get('HelloNestedLocateDepsColliding')];
                        case 4:
                            dep2 = _a.sent();
                            (0, chai_2.expect)(aaa.injection).to.be.deep.equal({
                                some: {
                                    nested: data2,
                                },
                                other: {
                                    otherNested: dep,
                                    moreNested: dep2,
                                }
                            });
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to load :factory with locateDeps and deps which have common deep nested properties', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa, dep;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('HelloFactoryNestedLocateDepsColliding')];
                        case 2:
                            aaa = _a.sent();
                            return [4 /*yield*/, di.get('HelloObjDestructurableParams')];
                        case 3:
                            dep = _a.sent();
                            (0, chai_2.expect)(aaa.injection).to.be.deep.equal({
                                some: {
                                    nested: __assign(__assign({}, data2), dep)
                                },
                            });
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to run before() and alter the deps passed in constructor', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, aaa;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('HelloBefore')];
                        case 2:
                            aaa = _a.sent();
                            (0, chai_2.expect)(typeof aaa.injection).to.not.be.equal('undefined');
                            (0, chai_2.expect)(typeof aaa.injection.additionFromBefore).to.not.be.equal('undefined');
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should return true on subsequent calls to loadAll()', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di;
                return __generator(this, function (_a) {
                    di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                    (0, chai_2.expect)(di.loadAll()).to.eventually.be.equal(false);
                    (0, chai_2.expect)(di.loadAll()).to.eventually.be.equal(true);
                    (0, chai_2.expect)(di.loadAll()).to.eventually.be.equal(true);
                    return [2 /*return*/];
                });
            });
        });
    });
    describe("di.get()", function () {
        it('should be able to get an async loaded entry', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            afterWasExecuted = false;
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('data')).to.be.equal(false);
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _b.sent();
                            _a = chai_2.expect;
                            return [4 /*yield*/, di.get('data')];
                        case 2:
                            _a.apply(void 0, [_b.sent()]).to.be.equal(data);
                            (0, chai_2.expect)(afterWasExecuted).to.be.equal(true);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("di.set()", function () {
        it('should be able to set a non existent entry', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, key, value, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            (0, chai_2.expect)(di.has('data')).to.be.equal(false);
                            key = 'nonExistent';
                            value = 'nonExistentValue';
                            di.set(key, value);
                            _a = chai_2.expect;
                            return [4 /*yield*/, di.get(key)];
                        case 1:
                            _a.apply(void 0, [_b.sent()]).to.be.equal(value);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should be able to set an existent entry', function () {
            return __awaiter(this, void 0, void 0, function () {
                var di, key, value, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            return [4 /*yield*/, di.loadAll()];
                        case 1:
                            _b.sent();
                            key = 'data';
                            (0, chai_2.expect)(di.has(key)).to.be.equal(true);
                            value = 'new value';
                            di.set(key, value);
                            _a = chai_2.expect;
                            return [4 /*yield*/, di.get(key)];
                        case 2:
                            _a.apply(void 0, [_b.sent()]).to.be.equal(value);
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
    describe("di.emit(<eventName>, <params>)", function () {
        it('should call <eventName>(<params>) on each el of injectionDict implementing it, and pass me and params as first param', function () {
            return __awaiter(this, void 0, void 0, function () {
                var injectionDict, di, param1, param2, hey;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            injectionDict = {
                                'Hey': {
                                    constructible: Hey,
                                    deps: { hey: 'hey' },
                                    subscriptions: {
                                        onHoyEvent: function (_a) {
                                            var serviceLocator = _a.serviceLocator, params = _a.params;
                                            return __awaiter(this, void 0, void 0, function () {
                                                var me;
                                                return __generator(this, function (_b) {
                                                    switch (_b.label) {
                                                        case 0: return [4 /*yield*/, serviceLocator.get('Hey')];
                                                        case 1:
                                                            me = _b.sent();
                                                            me.hoy.apply(me, params);
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            });
                                        },
                                    },
                                },
                            };
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            param1 = { hey: 'hoy' };
                            param2 = { hey2: 'hoy2' };
                            return [4 /*yield*/, di.emit('onHoyEvent', param1, param2)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('Hey')];
                        case 2:
                            hey = _a.sent();
                            (0, chai_2.expect)(hey.hoya).to.be.deep.equal([param1, param2]);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should call <eventName>(<params>) when the event name contains crazy chars', function () {
            return __awaiter(this, void 0, void 0, function () {
                var injectionDict, di, param1, param2, hey;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            injectionDict = {
                                'Hey': {
                                    constructible: Hey,
                                    deps: { hey: 'hey' },
                                    subscriptions: {
                                        'some:other:event': function (_a) {
                                            var serviceLocator = _a.serviceLocator, params = _a.params;
                                            return __awaiter(_this, void 0, void 0, function () {
                                                var me;
                                                return __generator(this, function (_b) {
                                                    switch (_b.label) {
                                                        case 0: return [4 /*yield*/, serviceLocator.get('Hey')];
                                                        case 1:
                                                            me = _b.sent();
                                                            me.hoy.apply(me, params);
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            });
                                        }
                                    },
                                },
                            };
                            di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                            param1 = { hey: 'hole' };
                            param2 = { hey2: 'hola' };
                            return [4 /*yield*/, di.emit('some:other:event', param1, param2)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, di.get('Hey')];
                        case 2:
                            hey = _a.sent();
                            (0, chai_2.expect)(hey.hoya).to.be.deep.equal([param1, param2]);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('should throw if listener is not a function', function () {
            return __awaiter(this, void 0, void 0, function () {
                var injectionDict, di, param1, param2;
                return __generator(this, function (_a) {
                    injectionDict = {
                        'Hey': {
                            constructible: Hey,
                            deps: { hey: 'hey' },
                            onHoyEvent: 'hey'
                        },
                    };
                    di = new DiContainer_1.default({ logger: saylo_1.logger, load: injectionDict });
                    param1 = { hey: 'hoy' };
                    param2 = { hey2: 'hoy2' };
                    (0, chai_2.expect)(di.emit('onHoyEvent', param1, param2)).to.eventually.throw();
                    return [2 /*return*/];
                });
            });
        });
    });
});
